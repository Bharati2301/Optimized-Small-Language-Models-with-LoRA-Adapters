{"task_id": "HumanEval/0", "completion": "for element in numbers:\n        for neighbor in numbers[numbers.index(element):]:\n            if abs(element - neighbor) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "# Remove all spaces\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to hold separated groups\n    result = []\n    \n    # Initialize variables to keep track of current group and its depth\n    current_group = \"\"\n    depth = 0\n    \n    for char in paren_string:\n        if char == \"(\":\n            # Increase depth when encountering an opening parenthesis\n            depth += 1\n        elif char == \")\":\n            # Decrease depth when encountering a closing parenthesis\n            depth -= 1\n            if depth == 0:\n                # If depth becomes zero, we have reached the end of a group\n                result.append(current_group)\n                current_group = \"\"\n            else:\n                # Continue building the current group\n                current_group += char\n                \n    return result"}
{"task_id": "HumanEval/2", "completion": "\"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Extracting the integer part\n    int_part = int(number)\n\n    # Calculating the fractional part by subtracting the integer part from the original number\n    frac_part = number - int_part\n\n    return frac_part"}
{"task_id": "HumanEval/3", "completion": "balance = 0\n    \n    for op in operations:\n        balance += op\n        \n        if balance < 0:\n            return True\n            \n    return False"}
{"task_id": "HumanEval/4", "completion": "if not numbers:\n        return 0\n    \n    total_sum = sum(numbers)\n    mean_value = total_sum / len(numbers)\n    \n    deviations = [abs(x - mean_value) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    \n    return mad"}
{"task_id": "HumanEval/5", "completion": "result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result[:-1]  # Remove the last added delimeter as it's not needed after removal"}
{"task_id": "HumanEval/6", "completion": "\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    max_depth = 0\n    current_depth = 0\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif char == ')':\n            current_depth -= 1\n    \n    return [max_depth] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "\"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "if not numbers:\n        return (0, 1)\n\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "# Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each number in the input list\n    for i in range(len(numbers)):\n        # Append the current number to the result if it's greater than or equal to the last added number\n        if not result or numbers[i] >= result[-1]:\n            result.append(numbers[i])\n    \n    return result"}
{"task_id": "HumanEval/10", "completion": "n = len(s)\n    for i in range(n // 2, -1, -1):\n        if s[i:] == s[i:][::-1]:\n            return s[:i]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string or is_palindrome(string):\n        return string\n    \n    prefix = find_longest_palindrome_suffix(string)\n    suffix = string[::-1]\n    \n    # The new prefix is everything after the last match plus one character from the original string\n    new_prefix = string[find_longest_palindrome_suffix(string) + 1:]\n    \n    return f\"{new_prefix}{prefix}{suffix}\""}
{"task_id": "HumanEval/11", "completion": "\"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\"\"\"\n    \n    # Convert the input strings to lists of integers\n    list_a = [int(char) for char in a]\n    list_b = [int(char) for char in b]\n    \n    # Perform XOR operation using map function\n    xor_result = map(lambda x, y: int(x ^ y), list_a, list_b)\n    \n    # Convert back to string\n    xor_string = ''.join(str(bit) for bit in xor_result)\n    \n    return xor_string"}
{"task_id": "HumanEval/12", "completion": "if not strings:\n        return None\n    \n    max_length = 0\n    result = None\n    \n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            result = string\n            \n    return result"}
{"task_id": "HumanEval/13", "completion": "while b != 0:\n        t = b\n        b = a % b\n        a = t\n    return a"}
{"task_id": "HumanEval/14", "completion": "prefix_list = []\n    for i in range(len(string)):\n        prefix_list.append(string[:i+1])\n    return prefix_list[::-1]"}
{"task_id": "HumanEval/15", "completion": "\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "# Convert the string to lowercase and use set to remove duplicates while preserving order\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "# Define the duration for which each character should be counted based on its ASCII representation\n    durations = {\n        ord('o'): 4,\n        ord('|'): 2,\n        ord('.'): 1\n    }\n\n    # Split the input string into individual characters\n    characters = music_string.split()\n\n    # Initialize an empty list to store the durations\n    durations_list = []\n\n    # Iterate over each character and add its duration to the list\n    for char in characters:\n        if char in durations:\n            durations_list.append(durations[char])\n\n    return durations_list"}
{"task_id": "HumanEval/18", "completion": "count = 0\n    start_index = 0\n    \n    while True:\n        try:\n            # Try to find the substring starting from the current index\n            position = string.index(substring, start_index)\n            count += 1\n            start_index = position + len(substring)\n        except ValueError:\n            break\n    \n    return count"}
{"task_id": "HumanEval/19", "completion": "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Convert the input string into a list of integers\n    nums = [int(num) for num in numbers.split()]\n    \n    # Sort the list of numbers\n    sorted_nums = sorted(nums)\n    \n    # Convert each integer back to its corresponding word representation\n    sorted_str = ''.join(str(num) for num in sorted_nums for chr(97 + num))\n    \n    return sorted_str"}
{"task_id": "HumanEval/20", "completion": "# Sort the list to make it easier to find the closest elements\n    sorted_numbers = sorted(numbers)\n\n    # Initialize variables for storing the smallest and largest values found so far\n    min_value = sorted_numbers[0]\n    max_value = sorted_numbers[-1]\n\n    # Loop through the sorted list to find the closest pair\n    for_loop_count = len(sorted_numbers) - 1\n    while for_loop_count > 1:\n        current_min = sorted_numbers.pop(0)\n        current_max = sorted_numbers.pop(-1)\n        \n        if abs(current_min - current_max) < abs(min_value - max_value):\n            min_value = current_min\n            max_value = current_max\n        \n        for_loop_count -= 2\n    \n    return min_value, max_value"}
{"task_id": "HumanEval/21", "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n\n    # Calculate the range of values\n    range_value = max_num - min_num\n\n    # Create a mapping for each value in the original list\n    mapped_values = [(num - min_num) / range_value for num in numbers]\n\n    return mapped_values\n\n# Test the function with provided data points\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0], \"Test case 1 failed\"\nassert rescale_to_unit([-10.0, 0.0, 10.0, 20.0]) == [-1.0, 0.0, 1.0, 2.0], \"Test case 2 failed\"\n\nprint(\"All test cases passed!\")"}
{"task_id": "HumanEval/22", "completion": "\"\"\" Filter given list of any python values only for integers\n    \n    Args:\n        values (List[Any]): The input list containing various types of elements.\n    \n    Returns:\n        List[int]: A new list containing only the integer elements from the input list.\n        \n    Examples:\n        >>> filter_integers(['a', 3.14, 5])\n        [5]\n        >>> filter_integers([1, 2, 3, 'abc', {}, []])\n        [1, 2, 3]\n    \"\"\"\n    return [value for value if isinstance(value, int) else None for value in values] or []"}
{"task_id": "HumanEval/23", "completion": "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "# Iterate from n-1 down to 2\n    for divisor in range(n - 1, 1, -1):\n        if n % divisor == 0:\n            return divisor"}
{"task_id": "HumanEval/25", "completion": "factors = []\n    divisor = 2\n\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "# Count occurrences of each number\n    counts = Counter(numbers)\n    \n    # Filter numbers based on their count\n    result = [num for counts[num] == 1 for num for num not in counts\n    \n    return result"}
{"task_id": "HumanEval/27", "completion": "flipped_string = \"\"\n    \n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    \n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "\"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings\n\n\n# Test cases to verify the correctness of the function\nprint(filter_by_prefix([], 'a'))  # Expected output: []\nprint(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))  # Expected output: ['abc', 'array']"}
{"task_id": "HumanEval/30", "completion": "\"\"\"Return only positive numbers in the list.\n\n    Args:\n        l (list): A list of integers.\n\n    Returns:\n        list: A new list containing only the positive numbers from the input list.\n    \"\"\"\n    return [x for x > 0 for x] if isinstance(l, list) else []"}
{"task_id": "HumanEval/31", "completion": "\"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True"}
{"task_id": "HumanEval/32", "completion": "\"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes lists with an even number of coefficients \n    and where the largest non-zero coefficient is used to guarantee a solution.\n    \n    >>> round(find_zero([1, 2]), 2)\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List must have an even number of coefficients\")\n\n    max_coeff = max(abs(coeff) for coeff in xs)\n\n    for i, coeff in enumerate(xs):\n        if abs(coeff) == max_coeff:\n            break\n\n    return x if i > 0 else x - max_coeff / (max_coeff - xs[i-1])\n\n# Example usage:\nprint(round(find_zero([1, 2]), 2)) # Should output approximately -0.5\nprint(round(find_zero([-6, 11, -6, 1]), 2)) # Should output approximately 1.0"}
{"task_id": "HumanEval/33", "completion": "# Create two lists for odd and even indices\n    odd = []\n    even = []\n\n    # Iterate through the original list\n    for idx, val in enumerate(l):\n        if idx % 2 == 0:\n            even.append(val)\n        else:\n            odd.append(val)\n\n    # Sort the even index values\n    even.sort()\n\n    # Combine the sorted even index values with the original odd index values\n    return [even[i] if i % 2 == 0 else odd[i // 2] for i in range(len(l))]\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "\"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "if not l:\n        return None\n    \n    max_val = l[0]\n    \n    for num in l:\n        if num > max_val:\n            max_val = num\n            \n    return max_val"}
{"task_id": "HumanEval/36", "completion": "count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            for char in str_i:\n                if char == '7':\n                    count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "# Extract elements at even indices from the original list\n    evens = [l[i] for i % 2 == 0]\n\n    # Sort these elements\n    evens.sort()\n\n    # Replace elements at even indices with the sorted ones\n    for i in range(0, len(l), 2):\n        l[i] = evens.pop(0)\n\n    return l"}
{"task_id": "HumanEval/38", "completion": "\"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = s.split(\" \")\n    \n    while \" \" in groups:\n        groups.remove(\" \")\n\n    result = \"\"\n    for group in groups:\n        result += group[:-1] + group[-1]\n\n    return result"}
{"task_id": "HumanEval/39", "completion": "# Generate all Fibonacci numbers up to the nth term\n    fib_numbers = [0, 1]\n    while len(fib_numbers) < n + 1:\n        next_fib = fib_numbers[-1] + fib_numbers[-2]\n        if next_fib <= 10**6:  # Limiting the search space for practical reasons\n            fib_numbers.append(next_fib)\n        else:\n            break\n    \n    # Filter out the prime numbers from the generated Fibonacci sequence\n    primes_in_fibs = [num for num in fib_numbers if isprime(num)]\n    \n    return primes_in_fibs[n - 1]\n\n# Test cases to verify correctness\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/40", "completion": "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # Check if the length of the list is less than 3\n    if len(l) < 3:\n        return False\n\n    # Sort the list to make it easier to find triplets\n    l.sort()\n\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n\n        while left < right:\n            total = l[i] + l[left] + l[right]\n\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n\n\n# Example usage\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))  # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))  # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\nprint(triples_sum_to_zero([1]))  # False"}
{"task_id": "HumanEval/41", "completion": "# Since all cars are traveling at the same speed,\n    # every pair of cars will eventually collide with probability 1.\n    # Therefore, we can calculate this by simply raising 2 to the power of n.\n    \n    return 2 ** n"}
{"task_id": "HumanEval/42", "completion": "return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "\"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "if not isinstance(x, int) or not isinstance(base, int):\n        raise ValueError(\"Input must be integers.\")\n    \n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n    \n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result += str(remainder)\n        x //= base\n    \n    # Reverse the string to get the correct order\n    return ''.join(reversed(result))"}
{"task_id": "HumanEval/45", "completion": "\"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    if not isinstance(a, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"Both sides must be numbers.\")\n    \n    if a <= 0 or h <= 0:\n        raise ValueError(\"Sides must be greater than zero.\")\n    \n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n# Test cases\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "HumanEval/47", "completion": "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return statistics.median(l)"}
{"task_id": "HumanEval/48", "completion": "# Remove all non-alphanumeric characters and convert to lowercase\n    cleaned_text = re.sub(r'\\W+', '', text.lower())\n    \n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]"}
{"task_id": "HumanEval/49", "completion": "if n == 0 or n == p - 1:\n        return 1\n    \n    # Calculate the modular inverse using Fermat's Little Theorem\n    inverse = pow(p, p - 2, p)\n    \n    result = pow(inverse, n, p)\n    return result"}
{"task_id": "HumanEval/50", "completion": "\"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    shifted_chars = [chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s]\n    return ''.join(shifted_chars)"}
{"task_id": "HumanEval/51", "completion": "# Define the regex pattern to match all vowels in both uppercase and lowercase\n    vowel_pattern = '[aeiouAEIOU]'\n    \n    # Use regular expression replace() method to substitute all occurrences of the pattern with an empty string\n    text_without_vowels = re.sub(vowel_pattern, '', text)\n    \n    return text_without_vowels\n\n# Test cases to verify the correctness of the function\nassert remove_vowels(\"\") == \"\"\nassert remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\nassert remove_vowels(\"abcdef\") == \"bcdf\"\nassert remove_vowels(\"aaaaa\") == \"\"\nassert remove_vowels(\"aaBAA\") == \"B\"\nassert remove_vowels(\"zbcd\") == \"zbcd\"\n\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/52", "completion": "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\n# Test cases to verify correctness\nassert below_threshold([1, 2, 4, 10], 100) == True\nassert below_threshold([1, 20, 4, 10], 5) == False\n\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/53", "completion": "return x + y"}
{"task_id": "HumanEval/54", "completion": "# Convert both strings to lowercase and remove non-alphabetic characters\n    cleaned_s0 = ''.join(filter(str.isalpha, s0)).lower()\n    cleaned_s1 = ''.join(filter(str.isalpha, s1)).lower()\n\n    # Create sets of unique characters for each word\n    set_s0 = set(cleaned_s0)\n    set_s1 = set(cleaned_s1)\n\n    return set_s0 == set_s1"}
{"task_id": "HumanEval/55", "completion": "if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "stack = []\n    \n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    \n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "if len(l) < 2:\n        return True\n    \n    direction = None\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            if direction == 'increasing':\n                return False\n            direction = 'increasing'\n        elif l[i] < l[i-1]:\n            if direction == 'decreasing':\n                return False\n            direction = 'decreasing'\n    \n    return True"}
{"task_id": "HumanEval/58", "completion": "\"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and find intersection\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # Sort the result and return it as a list\n    return sorted(list(common_elements))"}
{"task_id": "HumanEval/59", "completion": "# Initialize the largest prime factor as -1 (since no factors are known initially)\n    largest_prime = -1\n    \n    # Divide n by 2 until it becomes odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Now n must be odd, start checking from 3\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, divide n and update largest_prime\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # If n becomes a prime greater than 2, then n itself is the largest prime factor\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime"}
{"task_id": "HumanEval/60", "completion": "if n < 1:\n        return 0\n\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n\n    return total"}
{"task_id": "HumanEval/61", "completion": "stack = []\n    \n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    \n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "n = len(xs)\n    result = []\n    \n    for i in range(1, n):\n        result.append(xs[i] * i)\n    \n    return result"}
{"task_id": "HumanEval/63", "completion": "if n < 2:\n        return 0\n    \n    a, b, c = 0, 0, 1\n    for _ in range(3, n+1):\n        a, b, c = b, c, a + b + c\n        \n    return c"}
{"task_id": "HumanEval/64", "completion": "\"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s.lower() if char in vowels)\n    # Check if 'y' is at the end of the word\n    if len(s) > 0 and s[-1] == 'y':\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))   # Expected output: 3\nprint(vowels_count(\"rhythm\"))  # Expected output: 0\nprint(vowels_count(\"SYZYGY\"))  # Expected output: 4"}
{"task_id": "HumanEval/65", "completion": "# Convert the number to a string for easy manipulation\n    num_str = str(x)\n    \n    # Determine if the shift is greater than the length of the number\n    if len(num_str) <= shift:\n        # Return the reverse of the number if shift exceeds its length\n        return num_str[::-1]\n    else:\n        # Perform the circular shift\n        shifted_part = num_str[-shift:] + num_str[:-shift]\n        return shifted_part\n\n# Example usage:\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\""}
{"task_id": "HumanEval/66", "completion": "return sum(ord(c) for c in s if c in string.ascii_uppercase)"}
{"task_id": "HumanEval/67", "completion": "\"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \n    Example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \n    \"\"\"\n    # Split the input string into parts based on spaces\n    parts = s.split()\n    # Extract the numbers from each part\n    num_oranges = int(parts[1])\n    num_apples = int(parts[4].split()[0])\n    # Calculate the total number of oranges and apples\n    total_fruits = num_oranges + num_apples\n    # Subtract the total number of oranges and apples from the total number of fruits to get the number of mangoes\n    num_mangoes = n - total_fruits\n    return num_mangoes"}
{"task_id": "HumanEval/68", "completion": "# Check if the array is empty\n    if not arr:\n        return []\n\n    # Initialize variables for the minimum value and its index\n    min_val = float('inf')\n    min_idx = -1\n\n    # Iterate through the array to find the smallest even value\n    for idx, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_idx = idx\n\n    # Return the result as a list\n    return [min_val, min_idx] if min_idx != -1 else []"}
{"task_id": "HumanEval/69", "completion": "counter = Counter(lst)\n    \n    for num in range(1, max(counter.keys()) + 1):\n        if num not in counter or counter[num] < num:\n            continue\n        \n        count = sum(num * i for i in range(counter[num]))\n        \n        if count > len(lst):\n            return num\n    \n    return -1"}
{"task_id": "HumanEval/70", "completion": "if not lst: \n        return [] \n\n    sorted_lst = []\n\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n\n        if lst:\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n\n    return sorted_lst"}
{"task_id": "HumanEval/71", "completion": "# Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the result to 2 decimal points and return it\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "\"\"\"\n    Check if an object q can fly based on certain criteria:\n    - It must be a palindrome to be considered balanced.\n    - The total weight of the object should not exceed the maximum allowed weight w.\n    \n    Args:\n    q: List[int] representing the object.\n    w: int, the maximum allowed weight for flying.\n    \n    Returns:\n    bool: True if the object can fly, False otherwise.\n    \"\"\"\n\n    # Check if the object is a palindrome by comparing with its reverse\n    if q == q[::-1]:\n        # Calculate the sum of all elements in the object\n        total_weight = sum(q)\n        \n        # Return True if the object is balanced and the total weight is within the limit\n        return total_weight <= w\n\n# Test cases\nprint(will_it_fly([1, 2], 5))  # Expected output: False\nprint(will_it_fly([3, 2, 3], 1))  # Expected output: False\nprint(will_it_fly([3, 2, 3], 9))  # Expected output: True\nprint(will_it_fly([3], 5))  # Expected output: True"}
{"task_id": "HumanEval/73", "completion": "\"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    # Count the frequency of each element in the array\n    freq = Counter(arr)\n    mid = n // 2\n    \n    if n % 2 != 0:  # If the length of the array is odd\n        left_count = freq[arr[:mid+1]]\n        right_count = freq[arr[mid+1:][::-1]]\n    else:  # If the length of the array is even\n        left_count = freq[arr[:mid]]\n        right_count = freq[arr[mid:]][::-1]\n    \n    return min(left_count + right_count, n - left_count - right_count)\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0"}
{"task_id": "HumanEval/74", "completion": "# Calculate the total number of characters for each list\n    char_count_lst1 = sum(len(s) for s in lst1)\n    char_count_lst2 = sum(len(s) for s in lst2)\n\n    # Compare the totals and return the appropriate list\n    if char_count_lst1 < char_count_lst2:\n        return lst1\n    elif char_count_lst1 > char_count_lst2:\n        return lst2\n    else:\n        return lst1  # Return the first list if both lists have equal character counts"}
{"task_id": "HumanEval/75", "completion": "# Helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    factors = []\n    \n    for i in range(2, a // 2 + 1):\n        if a % i == 0 and is_prime(i):\n            while a % i == 0:\n                a //= i\n                count += 1\n            factors.append((i, count))\n            \n    if a > 1 and is_prime(a):\n        factors.append((a, 1))\n        \n    return len(factors) >= 3"}
{"task_id": "HumanEval/76", "completion": "\"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # Check if x is less than or equal to zero\n    if x <= 0:\n        return False\n    \n    # Check if x is equal to n\n    if x == n:\n        return True\n    \n    # Initialize the quotient variable as log(x)/log(n)\n    quotient = math.log(x) / math.log(n)\n    \n    # Convert quotient to integer\n    int_quotient = int(math.floor(quotient))\n    \n    # Check if n raised to the power of int_quotient equals x\n    if n ** int_quotient == x:\n        return True\n    \n    return False"}
{"task_id": "HumanEval/77", "completion": "\"\"\"\n    Write a function that takes an integer a and returns True if this integer is a cube of some integer number.\n    Note: You may assume the input is always valid.\n    Examples:\n    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n    False\n    \"\"\"\n    # Calculate the nth root of the absolute value of a to find potential integers that could be cubed\n    n = int(math.pow(abs(a), 1/3))\n    \n    # Check if the cube of this integer equals a\n    return n**3 == abs(a)\n\n# Test cases\nprint(iscube(1))   # True\nprint(iscube(2))   # False\nprint(iscube(-1))  # True\nprint(iscube(64))  # True\nprint(iscube(0))   # True\nprint(iscube(180)) # False"}
{"task_id": "HumanEval/78", "completion": "# Define the set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize counter for prime digits\n    prime_count = 0\n    \n    # Iterate over each character in the hexadecimal number\n    for char in hex_num:\n        if char in prime_hex_digits:\n            prime_count += 1\n            \n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "\"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n    'db100000db'\n    \"\"\"\n\n    if decimal == 0:\n        return \"db0db\"\n\n    binary_digits = []\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_digits.append(str(remainder))\n        decimal //= 2\n\n    binary_digits.reverse()\n    binary_string = ''.join(binary_digits)\n\n    return f\"db{binary_string}db\""}
{"task_id": "HumanEval/80", "completion": "if len(s) < 3:\n        return False\n\n    for first_char in range(len(s)-2):\n        for second_char in range(first_char+1, len(s)-1):\n            for third_char in range(second_char+1, len(s)):\n                if s[first_char] == s[second_char] or s[first_char] == s[third_char] or s[second_char] == s[third_char]:\n                    return False\n\n    return True\n\n# Test cases\nprint(is_happy(\"a\")) # False\nprint(is_happy(\"aa\")) # False\nprint(is_happy(\"abcd\")) # True\nprint(is_happy(\"aabb\")) # False\nprint(is_happy(\"adb\")) # True\nprint(is_happy(\"xyx\")) # False\nprint(is_happy(\"abcdefg\")) # True\nprint(is_happy(\"aaa\")) # False\nprint(is_happy(\"abcde\")) # True\nprint(is_happy(\"abca\")) # True\nprint(is_happy(\"xyz\")) # False\nprint(is_happy(\"xyx\")) # False\nprint(is_happy(\"abcdefg\")) # True\nprint(is_happy(\"abcdea\")) # False\nprint(is_happy(\"abcdeffgh\")) # False\nprint(is_happy(\"abcdefffgh\")) # True"}
{"task_id": "HumanEval/81", "completion": "# Define the GPA range boundaries for each letter grade\n    boundary = [(4.0, 'A+', 3.7), (3.7, 'A', 3.3), (3.3, 'A-', 3.0),\n                (3.0, 'B+', 2.7), (2.7, 'B', 2.3), (2.3, 'B-', 2.0),\n                (2.0, 'C+', 1.7), (1.7, 'C', 1.3), (1.3, 'C-', 1.0),\n                (1.0, 'D+', 0.7), (0.7, 'D', 0.0), (0.0, 'E', 0.0)]\n    \n    # Calculate the letter grade based on the GPA in the given ranges\n    letter_grades = [np.argmax(np.array(boundary)[:, 0] >= grades[i]) + 1 for i in range(len(grades))]\n    \n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "# Check if the length of the string is a prime number\n    length = len(string)\n    \n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # Return True if the length is a prime number, False otherwise\n    return is_prime(length)\n\n# Test cases\nprint(prime_length('Hello'))  # Expected: True\nprint(prime_length('abcdcba'))  # Expected: True\nprint(prime_length('kittens'))  # Expected: True\nprint(prime_length('orange'))  # Expected: False"}
{"task_id": "HumanEval/83", "completion": "\"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n    Args:\n    - n: A positive integer representing the number of digits in the number\n\n    Returns:\n    - The count of n-digit positive integers that start or end with 1\n    \"\"\"\n\n    # For single digit numbers, there is only one possibility which is 1 itself\n    if n == 1:\n        return 1\n    \n    # Numbers starting with 1 and ending with 1\n    ones_at_start_and_end = pow(2, n-1)\n    \n    # Numbers ending with 1 but not starting with 1\n    ones_at_end_only = pow(9, n-1)\n    \n    # Total count\n    total_count = ones_at_start_and_end + ones_at_end_only\n    \n    return total_count"}
{"task_id": "HumanEval/84", "completion": "# Convert N to binary and remove the '0b' prefix\n    bin_str = bin(N)[2:]\n    # Sum the binary digits\n    digit_sum = sum(int(digit) for digit in bin_str)\n    # Format the result as a binary string\n    formatted_bin_str = format(digit_sum, '032b')  # Ensuring at most 3 bits\n    \n    return formatted_bin_str"}
{"task_id": "HumanEval/85", "completion": "total = sum(num for index in range(1, len(lst), 2) if lst[index] % 2 == 0)\n    return total\n\n# Test cases to verify the correctness of the function\nassert add([4, 2, 6, 7]) == 2\nassert add([5, 3, 8, 9, 2]) == 8\nassert add([10, 15, 20, 18, 3]) == 30"}
{"task_id": "HumanEval/86", "completion": "# Split the input string into words using regex to handle multiple spaces\n    words = re.findall(r'\\b\\w+\\b', s)\n    \n    # Sort each word lexicographically\n    sorted_words = [sorted(word) for word in words\n    \n    # Join the sorted words back into a single string with spaces\n    return ''.join(sorted_words)"}
{"task_id": "HumanEval/87", "completion": "# Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # If the sublist is not empty, iterate over its elements\n        if sublist:\n            # Find all occurrences of x in the current sublist\n            indices = [i for sublist.index(x) for i for sublist[::-1].index(x)\n                       for sublist[::(-1)[sublist.index(x)]].index(x) or len(sublist)-1-i for i in range(len(sublist))]\n\n            # Add each occurrence's position to the result list\n            for index in indices:\n                result.append((index, sublist.index(x)))\n\n    # Return the sorted result based on specified conditions\n    return sorted(result)\n\n# Test cases\nprint(get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 1))\nprint(get_row([], 1))\nprint(get_row([[[]],[1],[1,2,3]], 3))"}
{"task_id": "HumanEval/88", "completion": "# Check if the length of the array is less than 2\n    if len(array) < 2:\n        return array\n\n    # Sort the array in ascending order by default\n    sorted_array = sorted(array)\n\n    # Calculate the sum of the first and last elements\n    total_sum = sum(array)\n\n    # If the sum is odd, reverse the array to sort in descending order\n    if total_sum % 2 == 1:\n        sorted_array.reverse()\n\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "if letter.isupper():\n        return chr((ord(letter) - 65 + rot) % 26 + 65)\n    else:\n        return chr((ord(letter) - 97 + rot) % 26 + 97)\n\ndef decrypt(encrypted_string, key):\n    decrypted = ''\n    for char in encrypted_string:\n        if char.isalpha():\n            is_uppercase = char.isupper()\n            shifted_char = rotate_letter(char.lower(), -key)\n            if is_uppercase:\n                decrypted += shifted_char.upper()\n            else:\n                decrypted += shifted_char\n        else:\n            decrypted += char\n    return decrypted\n\n\ndef encrypt(s):\n    # Ensure s starts with uppercase letter\n    if not s[0].isupper():\n        raise ValueError(\"Input must start with an uppercase letter.\")\n\n    # Get all alphabetic characters from s\n    letters_only = ''.join(filter(str.isalpha, s))\n\n    # Create a dictionary mapping each letter to its rotated counterpart\n    rotations = {char: rotate_letter(char, i * 2) for i, len(string.ascii_lowercase)}\n    \n    # Encrypt each character using the dictionary\n    encrypted = ''.join(rotations.get(c, c) for c in letters_only)\n\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "lst.sort()\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]"}
{"task_id": "HumanEval/91", "completion": "# Split the input string into sentences based on '.', '?', or '!'\n    sentences = S.split('.?!')\n    \n    # Initialize a counter for boredoms\n    boredom_count = 0\n    \n    # Iterate over each sentence in the list\n    for sentence in sentences:\n        # Use regex to check if the sentence starts with \"I\"\n        if re.search(r'^I\\s*', sentence):\n            boredom_count += 1\n            \n    return boredom_count\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # Expected output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Expected output: 1"}
{"task_id": "HumanEval/92", "completion": "# Check if x equals the sum of y and z or vice versa\n    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/93", "completion": "# Define vowels for easy reference\n    vowels = \"aeiouAEIOU\"\n    \n    # Encode each character based on its position\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            # Swap case\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            \n            # Find the next vowel index\n            i = 0\n            while char not in vowels[i:]:\n                i += 1\n            \n            # Replace vowel with the one two positions ahead\n            new_char = vowels[(vowels.index(char) + 2) % len(vowels)]\n            encoded_message += new_char\n    \n        else:\n            # Non-letter characters remain unchanged\n            encoded_message += char\n    \n    return encoded_message\n\n\n# Test cases\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "# Filter out non-prime numbers from the list\n    primes = [num for num in lst if isprime(num)]\n    \n    # If there are no prime numbers, return 0\n    if not primes:\n        return 0\n    \n    # Sum the digits of the largest prime number\n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "if not dict:  \n        return False\n\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n\n    return True\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) # Should print True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # Should print False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) # Should print False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # Should print False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"})) # Should print True"}
{"task_id": "HumanEval/96", "completion": "if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "# Extract the unit digit from both numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    result = unit_digit_a * unit_digit_b\n    \n    # Return the absolute value to ensure positive result regardless of signs\n    return abs(result)"}
{"task_id": "HumanEval/98", "completion": "\"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    Args:\n        s (str): The input string to check.\n\n    Returns:\n        int: The number of uppercase vowels found at even indices.\n\n    Examples:\n        >>> count_upper('aBCdEf')\n        1\n        >>> count_upper('abcdefg')\n        0\n        >>> count_upper('dBBE')\n        0\n    \"\"\"\n    # Define the uppercase vowels\n    uppercase_vowels = \"AEIOU\"\n\n    # Initialize counter for uppercase vowels at even indices\n    upper_count = 0\n\n    # Iterate over characters at even indices\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            upper_count += 1\n\n    return upper_count"}
{"task_id": "HumanEval/99", "completion": "\"\"\"\n    Creates a function that takes a string representing a number and returns\n    the closest integer to it. If the number is equidistant from two integers,\n    rounds it away from zero.\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Notes:\n    Rounding away from zero means rounding towards the nearest integer which\n    is farther from zero in case of tie.\n    \"\"\"\n\n    # Convert the input string to a float\n    num = float(value)\n    \n    # Check if the number is negative\n    is_negative = num < 0\n    \n    # Calculate the floor and ceiling values\n    floored_num = int(num)\n    ceil_value = floored_num + 1\n    \n    # Determine which direction to round based on sign\n    rounded_num = floored_num if abs(floored_num - num) <= abs(ceil_value - num) else ceil_value\n    \n    # Adjust for negative numbers\n    if is_negative:\n        rounded_num *= -1\n    \n    return rounded_num"}
{"task_id": "HumanEval/100", "completion": "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    piles = []\n    current_stones = n\n\n    for _ in range(n):\n        piles.append(current_stones)\n        if current_stones % 2 == 0:  # If current_stones is even\n            current_stones += 2  # Next even number\n        else:  # If current_stones is odd\n            current_stones += 2  # Next odd number\n\n    return piles[:-1]  # Exclude the last level which has fewer stones"}
{"task_id": "HumanEval/101", "completion": "# Split the string using comma and space as delimiters\n    words = s.split(', ')\n    return words\n\n# Test cases\nprint(words_string(\"Hi, my name is John\"))  # Output: ['Hi', 'my', 'name', 'is', 'John']\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: ['One', 'two', 'three', 'four', 'five', 'six']"}
{"task_id": "HumanEval/102", "completion": "if x > y:\n        x, y = y, x\n\n    # Check if both numbers are odd\n    if x % 2 == 1 and y % 2 == 1:\n        return -1\n    \n    # Return the largest even number in the given range\n    for_even_x := False\n    while not for_even_x:\n        for_even_x = True\n        if x % 2 != 0:\n            x += 2\n            for_even_x = False\n        elif y % 2 != 0:\n            y -= 2\n            for_even_x = False\n    return max(x, y)"}
{"task_id": "HumanEval/103", "completion": "if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m + 1))\n    count = max(m - n + 1, 1)\n    \n    avg = round(total_sum / count)\n    bin_avg = format(avg, 'b')\n    \n    return bin_avg\n\n\n# Test cases\nprint(rounded_avg(1, 5))  # Output: \"0b11\"\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "\"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n\n    for num in x:\n        digits = set(str(num))\n        if not any(digit in '2468' for digit in digits):\n            result.append(num)\n\n    return sorted(result)\n\n\n# Test cases\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "if num == 0:\n        return \"\"\n    elif num < 10:\n        return list(string.ascii_lowercase)[num-1]\n    else:\n        return \"\"\n\ndef by_length(arr):\n    # Filter out numbers not in the range 1 to 9\n    valid_numbers = [n for n in arr if 1 <= n <= 9]\n\n    # Sort the filtered numbers\n    sorted_nums = sorted(valid_numbers)\n\n    # Reverse the sorted numbers\n    reversed_sorted_nums = sorted_nums[::-1]\n\n    # Map the numbers to their names\n    named_nums = [get_name(n) for n in reversed_sorted_nums\n\n    return named_nums\n\n# Example usage:\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))  # Output: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nprint(by_length([]))                         # Output: []\nprint(by_length([1, -1, 55]))               # Output: ['One']"}
{"task_id": "HumanEval/106", "completion": "result = []\n    \n    # Iterate over each number up to n\n    for i in range(1, n + 1):\n        # Check if the current number is even\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result\n\n# Helper function to calculate factorial\ndef factorial(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * factorial(num - 1)"}
{"task_id": "HumanEval/107", "completion": "\"\"\"Check if a number is a palindrome.\"\"\"\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\ndef count_even_odd_palindromes(n):\n    # Calculate the maximum length of a palindrome with digits up to n\n    max_length = int(log10(n)) + 1\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(max_length // 2):\n        digit = (n - 1) // pow(10, i)\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if n >= 10**(max_length // 2):\n        even_count += 1\n    \n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "completion": "\"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(n):\n        if n < 0:\n            return [n % 10] + sum_of_digits(n // 10)\n        else:\n            return list(str(n))\n\n    positive_count = 0\n    for num in arr:\n        if sum(sum_of_digits(num)) > 0:\n            positive_count += 1\n\n    return positive_count\n\n\n# Test cases\nprint(count_nums([])) # Should output 0\nprint(count_nums([-1, 11, -11])) # Should output 1\nprint(count_nums([1, 1, 2])) # Should output 3"}
{"task_id": "HumanEval/109", "completion": "# Check if the array is already sorted or empty\n    if len(arr) == 0 or all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        return True\n    \n    # Perform right shifts until we find the first pair that breaks the sequence\n    for _ in range(len(arr)):\n        shifted_arr = [arr[-i-1] for i in range(1, len(arr))]\n        if all(shifted_arr[j] <= shifted_arr[j + 1] for j in range(len(shifted_arr) - 1)):\n            break\n    else:\n        return False\n    \n    # Check if the last two elements form a valid pair after the shift\n    return arr[0] <= arr[len(arr) - 1]"}
{"task_id": "HumanEval/110", "completion": "# Check if all elements in lst1 are odd\n    if not all(x % 2 == 0 for x in lst1):\n        return \"NO\"\n\n    # Check if there are enough even numbers in lst2 to replace the odd ones in lst1\n    count_odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    count_even_in_lst2 = len([x for x in lst2 if x % 2 == 0])\n\n    if count_odd_in_lst1 <= count_even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "# Split the input into individual characters\n    chars = test.split()\n    \n    # Use Counter to get the frequency of each character\n    char_count = collections.Counter(chars)\n    \n    # Find the maximum value in the counter\n    max_char = max(char_count.values())\n    \n    # Filter out only the characters that appear max times\n    result = {char: count for char, count > max_char}\n    \n    return result\n\n# Test cases\nprint(histogram('a b c'))  # Should print {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))  # Should print {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))  # Should print {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))  # Should print {'b': 4}\nprint(histogram(''))  # Should print {}"}
{"task_id": "HumanEval/112", "completion": "# Remove characters from s that match any character in c\n    modified_s = ''.join(ch for ch != c[i % len(c)] else '' for i < len(c) for ch in s)\n    \n    # Check if the resulting string is a palindrome\n    if modified_s == modified_s[::-1]:\n        return (modified_s, True)\n    else:\n        return (modified_s, False)"}
{"task_id": "HumanEval/113", "completion": "\"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \" the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    results = []\n    for num_str in lst:\n        # Counting odd digits in the current number string\n        odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n        \n        # Formatting the result to match the desired output format\n        formatted_result = f\"the number of odd elements {odd_count}n the str{odd_count}s of the {odd_count}nput.\"\n        results.append(formatted_result)\n    \n    return results"}
{"task_id": "HumanEval/114", "completion": "min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        \n        if current_sum < min_sum:\n            min_sum = current_sum\n        \n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum\n\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))  # Output: -6"}
{"task_id": "HumanEval/115", "completion": "# Convert the list into a NumPy array for easier manipulation\n    grid = np.array(grid)\n    \n    # Calculate total units of water in all wells\n    total_water = np.sum(np.sum(grid))\n    \n    # The minimum number of bucket drops required is equal to the total units of water divided by the bucket capacity\n    min_drops = total_water / capacity\n    \n    # If there's any remainder when dividing, we need one additional drop\n    if total_water % capacity > 0:\n        min_drops += 1\n        \n    return int(min_drops)"}
{"task_id": "HumanEval/116", "completion": "# Sort the array first by the count of ones in each number,\n    # and then by the decimal value if counts are equal.\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "vowels = \"aeiouAEIOU\"\n    words = s.split()\n    \n    result = [word for word in words if sum(1 for c in word.lower() if c not in vowels) == n]\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ':\n            continue\n        if word[i + 1] in vowels or word[i + 2] in vowels:\n            return word[i]\n    return ''"}
{"task_id": "HumanEval/119", "completion": "\"\"\"\n    Check if it is possible to concatenate two strings consisting of open '(' or close ')' parentheses\n    such that the concatenated result is a good string. A string is good if all parentheses are balanced.\n\n    Parameters:\n    lst (list): A list containing two strings with only '(' or ')' characters.\n\n    Returns:\n    str: \"Yes\" if the concatenation can form a good string, otherwise \"No\".\n    \"\"\"\n    \n    # Concatenate the two strings\n    combined_string = ''.join(lst)\n    \n    # Check for balance using regex pattern\n    if len(re.findall(r'\\(.*?\\)', combined_string)) % 2 != 0:\n        return 'No'\n    else:\n        return 'Yes'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # Should return 'Yes'\nprint(match_parens([')', ')']))   # Should return 'No'"}
{"task_id": "HumanEval/120", "completion": "\"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n        \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n        \n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n    \n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Use nlargest to get the k largest elements from the heap\n    max_elements = nlargest(k, arr)\n    return max_elements"}
{"task_id": "HumanEval/121", "completion": "\"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for_index = 0\n    \n    while len(lst) > 0:\n        if lst[for_index] % 2 != 0 and for_index % 2 == 0:\n            total += lst.pop(for_index)\n        else:\n            for_index += 1\n\n    return total"}
{"task_id": "HumanEval/122", "completion": "\"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    result = 0\n    for i in range(min(k, len(arr))):\n        if abs(int(str(arr[i])[0])) < 10 or int(str(arr[i])[0]) == 0:\n            result += arr[i]\n    return result"}
{"task_id": "HumanEval/123", "completion": "\"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    sequence = []\n    while n != 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)"}
{"task_id": "HumanEval/124", "completion": "# Regular expression pattern for matching a valid date format\n    pattern = r\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$\"\n    \n    # Check if the input matches the regular expression\n    if re.match(pattern, date):\n        try:\n            datetime.datetime.strptime(date, \"%m-%d-%Y\")\n            return True\n        except ValueError:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/125", "completion": "\"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words(\"Hello world!\")\n    ['Hello', 'world!']\n    >>> split_words(\"Hello,world!\")\n    ['Hello', 'world!']\n    >>> split_words(\"abcdef\")\n    3\n    \"\"\"\n\n    # Split on spaces and convert to lowercase for easier counting\n    txt = txt.lower().replace(',', '')\n    \n    # If there are no spaces or commas, count only the lowercase letters with odd ASCII values\n    if not txt.isalpha():\n        return sum(1 for char in txt if ((ord(char) - 97) % 2 != 0))\n    \n    # Otherwise, split on comma and return the result\n    return txt.split(',')\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3"}
{"task_id": "HumanEval/126", "completion": "\"\"\"\n    Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \n    Examples:\n    >>> is_sorted([5])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted([1, 3, 2, 4, 5])\n    False\n    >>> is_sorted([1, 2, 3, 4, 5, 6])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    False\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    True\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    False\n    \"\"\"\n    # Check if all elements are unique\n    if len(set(lst)) != len(lst):\n        return False\n    \n    for i in range(len(lst) - 1):\n        # Compare adjacent elements to ensure they are in ascending order\n        if lst[i] > lst[i + 1]:\n            return False\n            \n    return True"}
{"task_id": "HumanEval/127", "completion": "if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    x_min = max(interval1[0], interval2[0])\n    y_max = min(interval1[1], interval2[1])\n\n    # Calculate the intersection length\n    length = abs(y_max - x_min)\n\n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # Output: NO\nprint(intersection((-1, 1), (0, 4)))  # Output: NO\nprint(intersection((-3, -1), (-5, 5)))  # Output: YES"}
{"task_id": "HumanEval/128", "completion": "if not arr:\n        return None\n    \n    # Calculate the sign of each element in the array\n    signs = np.sign(arr)\n    \n    # Multiply the signs together\n    signed_product = np.prod(signs)\n    \n    # Compute the magnitude of each element in the array\n    magnitudes = np.abs(arr)\n    \n    # Return the sum of magnitudes multiplied by the product of signs\n    result = np.sum(magnitudes * signed_product)\n    \n    return result"}
{"task_id": "HumanEval/129", "completion": "@lru_cache(None)\n    def dfs(i, j, steps_left, prev_value):\n        # Base case: no more steps left or out of bounds\n        if steps_left == 0 or i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]):\n            return float('inf')\n        \n        # If all steps used up and current cell has not been visited yet\n        if steps_left == 0:\n            return abs(prev_value - grid[i][j])\n        \n        # Explore all possible moves\n        total_cost = float('inf')\n        for di, dj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            cost = dfs(di, dj, steps_left-1, grid[i][j]) + abs(prev_value - grid[i][j])\n            total_cost = min(total_cost, cost)\n        \n        return total_cost\n    \n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            min_path_cost = dfs(i, j, k, grid[i][j])\n            if min_path_cost != float('inf'):\n                result.append(min_path_cost)\n    \n    return sorted(result)\n\n# Example usage:\ngrid = [[1,2,3],[4,5,6],[7,8,9]]\nk = 3\nprint(minPath(grid, k))  # Output: [1, 2, 1]\n\ngrid = [[5,9,3],[4,1,6],[7,8,2]]\nk = 1\nprint(minPath(grid, k))  # Output: [1]"}
{"task_id": "HumanEval/130", "completion": "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tribonacci_sequence = []\n    \n    for i in range(n + 1):\n        if i == 0 or i == 1:\n            tribonacci_sequence.append(3)\n        elif i % 2 == 0:\n            tribonacci_sequence.append(1 + i // 2)\n        else:\n            previous_three = tribonacci_sequence[i-1] + tribonacci_sequence[i-2] + tribonacci_sequence[i+1]\n            tribonacci_sequence.append(previous_three)\n    \n    return tribonacci_sequence"}
{"task_id": "HumanEval/131", "completion": "\"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n# Test cases\nprint(digits(1))   # Output: 1\nprint(digits(4))   # Output: 0\nprint(digits(235)) # Output: 15"}
{"task_id": "HumanEval/132", "completion": "\"\"\"\n    Check if there's a valid subsequence of brackets with at least one nested bracket.\n    \n    Parameters:\n    s (str): A string containing only square brackets.\n    \n    Returns:\n    bool: True if there's a valid subsequence with at least one nested bracket, False otherwise.\n    \"\"\"\n\n    # Function to check for an opening bracket is followed by a closing bracket\n    def is_followed_by_close(bracket):\n        return bracket == '[' or bracket == ']'\n\n    # Function to check if a sequence has at least one nested bracket\n    def has_nested_sequence(seq):\n        stack = []\n        \n        for char in seq:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if not stack:\n                    return False\n                stack.pop()\n                \n        return len(stack) > 0\n    \n    # Split the string into individual brackets\n    brackets = [char for char.isalnum() else '' for char in s]\n    \n    # Filter out non-brackets characters\n    filtered_brackets = ''.join(brackets).split(',')\n    \n    # Find all subsequences that start with '[' and end with ']'\n    valid_subsequences = [seq for char in filtered_brackets if is_followed_by_close(char)]\n    \n    # Check each valid subsequence for nesting\n    for seq in valid_subsequences:\n        if has_nested_sequence(seq):\n            return True\n            \n    return False"}
{"task_id": "HumanEval/133", "completion": "# Round each number in the list to the nearest integer using ceiling function\n    rounded_lst = [math.ceil(num) for num in lst]\n    \n    # Calculate the sum of squares of the rounded numbers\n    result = sum(x ** 2 for x in rounded_lst)\n    \n    return result"}
{"task_id": "HumanEval/134", "completion": "# Check if the input is empty or contains only spaces\n    if txt == \"\" or txt.isspace():\n        return False\n    \n    # Get the last character of the string\n    last_char = txt[-1]\n    \n    # Check if the last character is a letter\n    if not last_char.isalpha():\n        return False\n    \n    # Check if the last character is at the end of a word\n    words = txt.split()\n    if len(words) > 0:\n        last_word = words[-1]\n        if last_char.lower() != last_word.lower()[len(last_word)-1].lower():\n            return False\n    \n    return True"}
{"task_id": "HumanEval/135", "completion": "for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            continue\n        else:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n\n    # Return (max(negatives), min(positives)) if both lists are not empty\n    if negatives and positives:\n        return (max(negatives), min(positives))\n    \n    # Otherwise, return (None, None)\n    return (None, None)\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output: (None, 1)\nprint(largest_smallest_integers([]))                   # Output: (None, None)\nprint(largest_smallest_integers([0]))                 # Output: (None, None)"}
{"task_id": "HumanEval/137", "completion": "try:\n        # Convert both values to float for comparison\n        return max(float(a), float(b))\n    except ValueError:\n        # Handle case where one value cannot be converted to float\n        if isinstance(a, str) and ',' in a:\n            # Split the string by comma and convert each part to float\n            parts = [float(part.strip()) for part.strip() for part.strip().split(',')\n            # Sort the list of floats and take the first element\n            return sorted(parts)[0]\n        elif isinstance(b, str) and ',' in b:\n            # Split the string by comma and convert each part to float\n            parts = [float(part.strip()) for part.strip() for part.strip().split(',')\n            # Sort the list of floats and take the first element\n            return sorted(parts)[0]\n        else:\n            # Return None if both values are already comparable\n            return None\n\n# Test cases\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None"}
{"task_id": "HumanEval/138", "completion": "# Check if the number is even and greater than or equal to 8\n    if n % 2 != 0 or n < 8:\n        return False\n    \n    # Check all possible combinations of four even numbers that add up to n\n    for i in range(1, n//2 + 1):\n        for j in range(i, n//3 + 1):\n            for k in range(j, n//4 + 1):\n                l = n - i - j - k\n                if l >= k and l % 2 == 0 and l // 2 == k:\n                    return True\n    return False\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # Output: False\nprint(is_equal_to_sum_even(6))  # Output: False\nprint(is_equal_to_sum_even(8))  # Output: True"}
{"task_id": "HumanEval/139", "completion": "if n <= 0:\n        raise ValueError(\"Input must be greater than 0\")\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n\n    return result"}
{"task_id": "HumanEval/140", "completion": "# Replace sequences of more than two spaces with '-'\n    result = re.sub(r'\\s{3,}', '-', text)\n    \n    # Replace remaining single spaces with '_'\n    result = result.replace(' ', '_')\n    \n    return result\n\n\n# Test cases to verify the correctness of the function\nassert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\"\n\nprint(\"All test cases passed.\")"}
{"task_id": "HumanEval/141", "completion": "pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[.]\\w+$'\n    \n    match = re.match(pattern, file_name)\n    \n    return 'Yes' if match else 'No'"}
{"task_id": "HumanEval/142", "completion": "total_sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i]**2\n        elif i % 4 == 0:\n            total_sum -= lst[i]**3\n    \n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    primes = [word for word in words if is_prime(len(word))]\n    return ''.join(primes)"}
{"task_id": "HumanEval/144", "completion": "# Convert string representations of fractions to decimal values\n    num_x = float(x.split('/')[0]) / float(x.split('/')[1])\n    num_n = float(n.split('/')[0]) / float(n.split('/')[1])\n\n    # Check if the product is an integer\n    return int(num_x * num_n) == num_x * num_n\n\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # Expected output: True\nprint(simplify(\"1/6\", \"2/1\"))   # Expected output: False\nprint(simplify(\"7/10\", \"10/2\"))# Expected output: False"}
{"task_id": "HumanEval/145", "completion": "# Sort numbers by sum of their digits and then by their position in the original list\n    nums.sort(key=lambda x: (sum(int(digit) for digit.isdigit() for int(digit)) for digit in str(x)), reverse=False)\n    \n    return nums\n\n# Test cases\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []"}
{"task_id": "HumanEval/146", "completion": "count = 0\n    \n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            \n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n                \n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/147", "completion": "# Initialize variables\n    count = 0\n    \n    # Create the array a\n    a = []\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n    \n    # Iterate over all possible triple combinations\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "\"\"\"\n    There are eight planets in our solar system: the closest to the Sun is Mercury,\n    the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune.\n\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n\n    Examples:\n    bf(\"Jupiter\", \"Neptune\") => (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") => (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") => (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\n    \"\"\"\n\n    # Define the order of the planets from closest to farthest from the sun\n    PLANETS = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\",\n               \"Uranus\", \"Neptune\"]\n\n    # Check if both inputs are valid planet names\n    if planet1 not in PLANETS or planet2 not in PLANETS:\n        return ()\n\n    # Find the indices of planet1 and planet2\n    index1 = PLANETS.index(planet1)\n    index2 = PLANETS.index(planet2)\n\n    # Return the planets between planet1 and planet2, excluding them\n    return tuple(PLANETS[i] for i in range(index1 + 1, index2))\n\n# Example usage\nprint(bf(\"Jupiter\", \"Neptune\"))  # Output: ('Saturn', 'Uranus')\nprint(bf(\"Earth\", \"Mercury\"))    # Output: ('Venus',)\nprint(bf(\"Mercury\", \"Uranus\"))  # Output: ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')"}
{"task_id": "HumanEval/149", "completion": "# Filter out words with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "\"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    >>> x_or_y(7, 34, 12)\n    34\n    >>> x_or_y(15, 8, 5)\n    5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Test cases to verify correctness\nassert x_or_y(7, 34, 12) == 34\nassert x_or_y(15, 8, 5) == 5\n\nprint(\"All tests passed.\")"}
{"task_id": "HumanEval/151", "completion": "\"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    Examples:\n        >>> double_the_difference([1, 3, 2, 0])\n        10\n        >>> double_the_difference([-1, -2, 0])\n        0\n        >>> double_the_difference([9, -2])\n        81\n        >>> double_the_difference([0])\n        0\n    \"\"\"\n    # Filter out non-integer elements and ignore negative numbers\n    filtered_numbers = [num for isinstance(num, int) and num >= 0]\n    \n    # Calculate the sum of squares of the remaining numbers\n    result = sum(num ** 2 for num % 2 != 0)\n    \n    return result\n\n# Test cases to verify correctness\nassert double_the_difference([1, 3, 2, 0]) == 10\nassert double_the_difference([-1, -2, 0]) == 0\nassert double_the_difference([9, -2]) == 81\nassert double_the_difference([0]) == 0"}
{"task_id": "HumanEval/152", "completion": "# Convert game and guess lists into NumPy arrays for easier manipulation\n    game_array = np.array(game)\n    guess_array = np.array(guess)\n\n    # Compute the absolute differences using broadcasting in NumPy\n    abs_diffs = np.abs(game_array - guess_array)\n\n    return abs_diffs.tolist()"}
{"task_id": "HumanEval/153", "completion": "max_strength = float('-inf')\n    best_extension = None\n\n    for extension in extensions:\n        cap = sum(1 for c.isupper() for c in extension)\n        sm = sum(1 for c.islower() for c in extension)\n        strength = cap - sm\n\n        if strength > max_strength:\n            max_strength = strength\n            best_extension = extension\n\n    return f\"{class_name}.{best_extension}\""}
{"task_id": "HumanEval/154", "completion": "# Check if b is a rotation of a\n    if b in a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/155", "completion": "# Convert the number to a string to easily iterate over each digit\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    count_even = 0\n    count_odd = 0\n    \n    # Iterate through each character in the string representation of the number\n    for char in num_str:\n        if int(char) % 2 == 0:  # Check if the digit is even\n            count_even += 1\n        else:  # If it's odd\n            count_odd += 1\n            \n    # Return a tuple with counts of even and odd digits\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "\"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    value = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    sybols = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // value[i]):\n            roman_numeral += sybols[i]\n            number -= value[i]\n        i += 1\n    return roman_numeral"}
{"task_id": "HumanEval/157", "completion": "'''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if any side length is greater than or equal to the sum of the other two sides\n    if max(a, b, c) >= (a + b + min(a, b, c)) or \\\n       min(a, b, c) >= (a + b - min(a, b, c)):\n        return False\n    \n    # Check Pythagorean theorem: a^2 + b^2 = c^2\n    return a**2 + b**2 == c**2 or \\\n           a**2 + c**2 == b**2 or \\\n           b**2 + c**2 == a**2\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # Expected output: True\nprint(right_angle_triangle(1, 2, 3))  # Expected output: False\nprint(right_angle_triangle(5, 12, 13))  # Expected output: False\nprint(right_angle_triangle(8, 15, 17))  # Expected output: True\nprint(right_angle_triangle(6, 8, 10))  # Expected output: True\nprint(right_angle_triangle(10, 6, 8))  # Expected output: False\nprint(right_angle_triangle(7, 12, 15))  # Expected output: False"}
{"task_id": "HumanEval/158", "completion": "max_length = 0\n    result_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_length or (\n            unique_chars == max_length and word < result_word\n        ):\n            max_length = unique_chars\n            result_word = word\n    \n    return result_word"}
{"task_id": "HumanEval/159", "completion": "# Calculate the number of carrots needed for the meal\n    need_for_meal = min(number, need)\n    \n    # Update the number of carrots eaten\n    number += need_for_meal\n    \n    # Calculate how many carrots remain after eating\n    remaining -= need_for_meal\n    \n    # If there are any remaining carrots, update the number of carrots eaten again\n    while remaining > 0:\n        need_for_meal = min(need, remaining)\n        number += need_for_meal\n        remaining -= need_for_meal\n    \n    return [number, remaining]"}
{"task_id": "HumanEval/160", "completion": "if len(operand) != len(operator) + 1 or not all(isinstance(x, int) for x in operand for isinstance(x, int)):\n        raise ValueError(\"Operand must be a list of non-negative integers.\")\n    \n    # Initialize the result with the first element of the operand list\n    result = operand[0]\n\n    # Iterate over the remaining elements of the operator and operand lists\n    for i in range(len(operator)):\n        op_index = operator[i] == '+' or operator[i] == '-' or operator[i] == '*' or operator[i] == '//'\n        if op_index:\n            # Perform the operation based on the operator\n            if operator[i] == '+':\n                result += operand[i+1]\n            elif operator[i] == '-':\n                result -= operand[i+1]\n            elif operator[i] == '*':\n                result *= operand[i+1]\n            elif operator[i] == '//':\n                result //= operand[i+1]\n\n    return result"}
{"task_id": "HumanEval/161", "completion": "# Check if the input string contains any letters\n    has_letters = bool(re.search('[a-zA-Z]', s))\n    \n    # Reverse the string if it contains letters\n    if has_letters:\n        return ''.join([char.swapcase() for char in reversed(s)])\n    else:\n        return s[::-1]"}
{"task_id": "HumanEval/162", "completion": "if not text:\n        return None\n    \n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    \n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "\"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a <= b for the loop to work correctly\n    if a > b:\n        a, b = b, a\n\n    result = []\n\n    while a <= b:\n        digit = a % 10\n        if digit % 2 == 0:  # Check if the digit is even\n            result.append(digit)\n        a += 1\n\n    return sorted(result)"}